
// Import libraries.
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <filesystem>


// Import header files.
#include "determine_ij.h"
#include "agent.h"
#include "virus.h"
#include "bacteria.h"
#include "bacteriovorous.h"
#include "ecoli.h"
#include "bdelloplast.h"
#include "infected.h"
#include "node.h"



int main()
{
    // The dimensions of the lattice.
    int x_len = 1;
    int y_len = 1;

    // Initial quantities.
    int init_nutrients = 100;

    int init_ecoli_in_node = 10;
    int init_bdelloplast_in_node = 0;
    int init_infected_in_node = 0;

    int init_bacteriovorus_in_node = 4;
    int init_virus_in_node = 2;

    // Paramaterizable variables.
    double bacteriovorous_attack_rate = 1;
    int bdelloplast_incubation_period = 1;
    double virus_attack_succes_rate = 1;

    // Variables used for debugging.
    int num_ecoli;
    int num_bacteriovorus, num_bdelloplast;
    int num_virus, num_infected;

    int i_up, i_down, j_left, j_right;
    std::vector<int> ij_coordinates;

    // Create a lattice of nodes.
    node lattice[x_len][y_len];

    // Initialize every node in the lattice according to initial quantities.
    for (int i = 0; i < x_len; i++)
    {
        for (int j = 0; j < y_len; j++)
        {
            // Create node.
            lattice[i][j] = node(i, j, init_nutrients, init_ecoli_in_node, init_bdelloplast_in_node,
                init_infected_in_node, init_virus_in_node, init_bacteriovorus_in_node);

            // num_virus = lattice[i][j].num_virus;
            // std::cout << "num_virus: " << num_virus << std::endl;

            // Set the bacteriovorous attack rate and the bdelloplast incubation period
            //  for each bacteriovorous in the node.
            for (int n = 0; n < init_bacteriovorus_in_node; n++)
            {
                lattice[i][j].set_bacteriovorous_cell_attack_rate(n, bacteriovorous_attack_rate);
                lattice[i][j].set_bdelloplast_incubation_period(n, bdelloplast_incubation_period);
            }

            lattice[i][j].ecoli_consume_nutrients();

            int energy;

            for (int k = 0; k < lattice[i][j].num_ecoli; k++)
            {
                energy = lattice[i][j].ecoli_list[k].energy;
                std::cout << "energy: " << energy << std::endl;
            }

            // Call function to iterate over the bacteriovorous cells and have them
            //  attempt to attack Ecoli cells.

            lattice[i][j].iterate_ecoli_mutate_die_reproduce();

            lattice[i][j].bacteriovorous_attack_prey();
            lattice[i][j].virus_infect_prey();
        }
    }

    // Testing printing out the amount of each agent in each node as well as a node's neighbors.
    for (int i = 0; i < x_len; i++)
    {
        for (int j = 0; j < y_len; j++)
       {
           std::cout << "Location: " << i << ", " << j << std::endl;

           num_ecoli = lattice[i][j].num_ecoli;
           num_bacteriovorus = lattice[i][j].num_bacteriovorous;
           num_bdelloplast = lattice[i][j].num_bdelloplast;
           num_virus = lattice[i][j].num_virus;
           num_infected = lattice[i][j].num_infected;

           std::cout << "Amount of E. coli in this node: " << num_ecoli << std::endl;

           std::cout << "Amount of bacteriovorus in this node: " << num_bacteriovorus << std::endl;
           std::cout << "Amount of bdelloplast in this node: " << num_bdelloplast << std::endl;

           std::cout << "Amount of virus' in this node: " << num_virus << std::endl;
           std::cout << "Amount of infected E. coli cells in this node: " << num_infected << std::endl;

           ij_coordinates = determine_ij(i, j, x_len, y_len);

           i_up = ij_coordinates[0];
           i_down = ij_coordinates[1];
           j_left = ij_coordinates[2];
           j_right = ij_coordinates[3];

           std::cout << "i: " << i << ", j: " << j
                        << ", i_up: " << i_up << ", i_down: " << i_down
                        << ", j_left: " << j_left << ", j_right: " << j_right << std::endl;
           std::cout << "####################################################" << std::endl;

           bool phage_resistant;

           for (int k = 0; k < lattice[i][j].num_ecoli; k++)
           {
               phage_resistant = lattice[i][j].ecoli_list[k].phage_resistant;
               std::cout << "phage resistance: " << phage_resistant << std::endl;
           }

       }
    }

    std::vector<int> myvector = {0, 1, 2, 3, 4, 5};

    myvector.erase(myvector.begin() + 1);
    myvector.erase(myvector.begin() + 1);

    std::sort(myvector.begin(), myvector.end(), std::greater<>());

    for (int i = 0; i < myvector.size(); i++)
    {
        std::cout << "num: " << myvector[i] << std::endl;
    }


    // Create directories to store data generated by the simulation.
    // std::string ecoli_dir_name = "ecoli/";
    // std::string bacteriovorous_dir_name = "bacteriovorous/";
    //
    // std::filesystem::create_directories(ecoli_dir_name);
    // std::filesystem::create_directories(bacteriovorous_dir_name);
    //
    // Open files and specify file names.
    // std::ofstream ecoli_file;
    // std::ofstream bacteriovorous_file;
    //
    // ecoli_file.open(ecoli_dir_name + "ecoli_grid.txt");
    // bacteriovorous_file.open(bacteriovorous_dir_name + "bacteriovorous_grid.txt");
    //
    // Iterate over the lattice and record the number of each agent onto output files.
    // for (int i = 0; i < x_len; i++)
    // {
    //     for (int j = 0; j < y_len; j++)
    //    {
    //        num_ecoli = lattice[i][j].num_ecol;
    //        num_bacteriovorus = lattice[i][j].num_bacteriovorous;
    //
    //        ecoli_file << num_ecoli << " ";
    //        bacteriovorous_file << num_bacteriovorus << " ";
    //    }
    //    ecoli_file << "\n";
    //    // ecoli_file << std::endl;
    //    bacteriovorous_file << "\n";
    // }
    //
    // Close the output files.
    // ecoli_file.close();
    // bacteriovorous_file.close();


}
